package primeirografo;

import com.alee.laf.WebLookAndFeel;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    GrafoLista grafo;
    boolean arestasTemPeso;
    ArrayList<String> vesticesVisitados = new ArrayList<>();

    public Principal() {
        try {
            UIManager.setLookAndFeel(new WebLookAndFeel());
        } catch (Exception e) {
        }

        initComponents();
        ativaBotoes(false);
        campoHistorico.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        botaoCriarGrafo = new javax.swing.JButton();
        botaoAdicionarVertice = new javax.swing.JButton();
        botaoVerticesAutomaticos = new javax.swing.JButton();
        botaoAdicionarAresta = new javax.swing.JButton();
        botaoRemoverAresta = new javax.swing.JButton();
        botaoRemoverVertice = new javax.swing.JButton();
        botaoVerificarVertice = new javax.swing.JButton();
        botaoVerificarAresta = new javax.swing.JButton();
        botaoRetornarArestas = new javax.swing.JButton();
        botaoImprimirGrafo = new javax.swing.JButton();
        botaoPlanar = new javax.swing.JButton();
        botaoBuscaEmLargura = new javax.swing.JButton();
        botaoBuscaEmProfundidade = new javax.swing.JButton();
        botaoDijkstra = new javax.swing.JButton();
        botaoLimparHistorico = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        campoHistorico = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Grafos");
        setPreferredSize(new java.awt.Dimension(810, 451));
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Opções"));
        jPanel1.setLayout(new java.awt.GridLayout(15, 0));

        botaoCriarGrafo.setText("Criar Grafo");
        botaoCriarGrafo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCriarGrafoActionPerformed(evt);
            }
        });
        jPanel1.add(botaoCriarGrafo);

        botaoAdicionarVertice.setText("Adicionar Vértice");
        botaoAdicionarVertice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAdicionarVerticeActionPerformed(evt);
            }
        });
        jPanel1.add(botaoAdicionarVertice);

        botaoVerticesAutomaticos.setText("Vértices Automáticos (Testes)");
        botaoVerticesAutomaticos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoVerticesAutomaticosActionPerformed(evt);
            }
        });
        jPanel1.add(botaoVerticesAutomaticos);

        botaoAdicionarAresta.setText("Adicionar Aresta");
        botaoAdicionarAresta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAdicionarArestaActionPerformed(evt);
            }
        });
        jPanel1.add(botaoAdicionarAresta);

        botaoRemoverAresta.setText("Remover Aresta");
        botaoRemoverAresta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoRemoverArestaActionPerformed(evt);
            }
        });
        jPanel1.add(botaoRemoverAresta);

        botaoRemoverVertice.setText("Remover Vértice");
        botaoRemoverVertice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoRemoverVerticeActionPerformed(evt);
            }
        });
        jPanel1.add(botaoRemoverVertice);

        botaoVerificarVertice.setText("Verificar Vértice");
        botaoVerificarVertice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoVerificarVerticeActionPerformed(evt);
            }
        });
        jPanel1.add(botaoVerificarVertice);

        botaoVerificarAresta.setText("Verificar Aresta");
        botaoVerificarAresta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoVerificarArestaActionPerformed(evt);
            }
        });
        jPanel1.add(botaoVerificarAresta);

        botaoRetornarArestas.setText("Retornar Arestas");
        botaoRetornarArestas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoRetornarArestasActionPerformed(evt);
            }
        });
        jPanel1.add(botaoRetornarArestas);

        botaoImprimirGrafo.setText("Imprimir Grafo");
        botaoImprimirGrafo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoImprimirGrafoActionPerformed(evt);
            }
        });
        jPanel1.add(botaoImprimirGrafo);

        botaoPlanar.setText("Verificar se é Planar");
        botaoPlanar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoPlanarActionPerformed(evt);
            }
        });
        jPanel1.add(botaoPlanar);

        botaoBuscaEmLargura.setText("Busca em Largura");
        botaoBuscaEmLargura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoBuscaEmLarguraActionPerformed(evt);
            }
        });
        jPanel1.add(botaoBuscaEmLargura);

        botaoBuscaEmProfundidade.setText("Busca em Profundidade");
        botaoBuscaEmProfundidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoBuscaEmProfundidadeActionPerformed(evt);
            }
        });
        jPanel1.add(botaoBuscaEmProfundidade);

        botaoDijkstra.setText("Dijkstra");
        botaoDijkstra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoDijkstraActionPerformed(evt);
            }
        });
        jPanel1.add(botaoDijkstra);

        botaoLimparHistorico.setText("Limpar Historico");
        botaoLimparHistorico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoLimparHistoricoActionPerformed(evt);
            }
        });
        jPanel1.add(botaoLimparHistorico);

        getContentPane().add(jPanel1, java.awt.BorderLayout.LINE_START);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Histórico"));
        jPanel2.setPreferredSize(new java.awt.Dimension(400, 439));
        jPanel2.setLayout(new java.awt.BorderLayout());

        campoHistorico.setColumns(20);
        campoHistorico.setRows(5);
        jScrollPane1.setViewportView(campoHistorico);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel3.setMinimumSize(new java.awt.Dimension(50, 50));
        jPanel3.setPreferredSize(new java.awt.Dimension(100, 50));

        jLabel1.setText("Trabalho de Grafos (M1.2)");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 19, 227));
        jLabel2.setText("Alunos: Eduardo Vinícius Mölleken Tomita, Leonardo Lucas de Melo");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addContainerGap(427, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel3, java.awt.BorderLayout.PAGE_END);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ativaBotoes(boolean ativa) {
        botaoAdicionarAresta.setEnabled(ativa);
        botaoAdicionarVertice.setEnabled(ativa);
        botaoImprimirGrafo.setEnabled(ativa);
        botaoRemoverAresta.setEnabled(ativa);
        botaoRemoverVertice.setEnabled(ativa);
        botaoRetornarArestas.setEnabled(ativa);
        botaoVerificarAresta.setEnabled(ativa);
        botaoVerificarVertice.setEnabled(ativa);
        botaoPlanar.setEnabled(ativa);
        botaoBuscaEmLargura.setEnabled(ativa);
        botaoBuscaEmProfundidade.setEnabled(ativa);
        botaoDijkstra.setEnabled(ativa);
        botaoVerticesAutomaticos.setEnabled(ativa);
    }

    private String pergunta(String mensagem) {
        String resposta;        
        
        resposta = JOptionPane.showInputDialog(mensagem);
        
        if (resposta == null){
            resposta = "";
        }

        return resposta;
    }

    private void botaoRemoverVerticeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoRemoverVerticeActionPerformed
        String rotulo = pergunta("Qual o rótulo do vértice?");

        if (rotulo.equals("")) {
            campoHistorico.setText(campoHistorico.getText() + "\nResposta inválida");
            return;
        }

        campoHistorico.setText(campoHistorico.getText() + "\n" + grafo.removeVertice(rotulo));
    }//GEN-LAST:event_botaoRemoverVerticeActionPerformed

    private void botaoVerificarVerticeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoVerificarVerticeActionPerformed
        String rotulo = pergunta("Qual o rótulo do vértice?");

        if (rotulo.equals("")) {
            campoHistorico.setText(campoHistorico.getText() + "\nResposta inválida");
            return;
        }

        if (grafo.verificaVertice(rotulo)) {
            campoHistorico.setText(campoHistorico.getText() + "\nO Vértice foi encontrado.");
        } else {
            campoHistorico.setText(campoHistorico.getText() + "\nO Vértice não existe.");
    }//GEN-LAST:event_botaoVerificarVerticeActionPerformed
    }

    private void botaoCriarGrafoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCriarGrafoActionPerformed
        if (botaoCriarGrafo.getText().equals("Criar Grafo")) {

            String direcional = pergunta("O Grafo é Direcional? (S/N)").toUpperCase();

            if (!direcional.equals("S") && (!direcional.equals("N"))) {
                campoHistorico.setText(campoHistorico.getText() + "\nResposta inválida");
                return;
            }

            String possuiPeso = pergunta("As arestas devem possuir peso? (S/N)").toUpperCase();

            if (!possuiPeso.equals("S") && (!possuiPeso.equals("N"))) {
                campoHistorico.setText(campoHistorico.getText() + "\nResposta inválida");
                return;
            }

            grafo = new GrafoLista(direcional.equals("S"), possuiPeso.equals("S"));
            arestasTemPeso = possuiPeso.equals("S");
            botaoCriarGrafo.setText("Remover Grafo");
            ativaBotoes(true);

        } else {
            grafo = null;
            botaoCriarGrafo.setText("Criar Grafo");
            ativaBotoes(false);
        }
    }//GEN-LAST:event_botaoCriarGrafoActionPerformed

    private void botaoAdicionarVerticeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAdicionarVerticeActionPerformed
        String rotulo = pergunta("Qual o rótulo do vértice?");

        if (rotulo.equals("")) {
            campoHistorico.setText(campoHistorico.getText() + "\nResposta inválida");
            return;
        }

        Vertice novoVertice = new Vertice(rotulo);

        if (grafo.insereVertice(novoVertice)) {
            campoHistorico.setText(campoHistorico.getText() + "\nO vértice com o rótulo " + rotulo + " foi inserido com sucesso.");
        } else {
            campoHistorico.setText(campoHistorico.getText() + "\nO vértice com o rótulo " + rotulo + " já existe.");
        }

    }//GEN-LAST:event_botaoAdicionarVerticeActionPerformed

    private void botaoAdicionarArestaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAdicionarArestaActionPerformed
        int pesoAresta = 0;
        String verticeOrigem = pergunta("Qual o rótulo do vértice de origem?");
        String verticeDestino = pergunta("Qual o rótulo do vértice de destino?");

        if (verticeOrigem.equals("") || (verticeDestino.equals(""))) {
            campoHistorico.setText(campoHistorico.getText() + "\nResposta inválida");
            return;
        }

        if (arestasTemPeso) {
            try {
                pesoAresta = Integer.parseInt(pergunta("Qual o peso desta aresta?"));
            } catch (Exception e) {
                campoHistorico.setText(campoHistorico.getText() + "\nPeso inválido");
                return;
            }
        }

        if (grafo.inserirAresta(verticeOrigem, verticeDestino, pesoAresta)) {
            campoHistorico.setText(campoHistorico.getText() + "\nA aresta foi inserida com sucesso.");
        } else {
            campoHistorico.setText(campoHistorico.getText() + "\nNão foi possível inserir a aresta.");
        }
    }//GEN-LAST:event_botaoAdicionarArestaActionPerformed

    private void botaoRemoverArestaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoRemoverArestaActionPerformed
        String verticeOrigem = pergunta("Qual o rótulo do vértice de origem?");
        String verticeDestino = pergunta("Qual o rótulo do vértice de destino?");

        if (verticeOrigem.equals("") || (verticeDestino.equals(""))) {
            campoHistorico.setText(campoHistorico.getText() + "\nResposta inválida");
            return;
        }

        campoHistorico.setText(campoHistorico.getText() + "\n" + grafo.removeAresta(verticeOrigem, verticeDestino));
    }//GEN-LAST:event_botaoRemoverArestaActionPerformed

    private void botaoVerificarArestaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoVerificarArestaActionPerformed
        String verticeOrigem = pergunta("Qual o rótulo do vértice de origem?");
        String verticeDestino = pergunta("Qual o rótulo do vértice de destino?");

        if (verticeOrigem.equals("") || (verticeDestino.equals(""))) {
            campoHistorico.setText(campoHistorico.getText() + "\nResposta inválida");
            return;
        }

        if (grafo.verificaAresta(verticeOrigem, verticeDestino)) {
            campoHistorico.setText(campoHistorico.getText() + "\nA aresta foi encontrada.");
        } else {
            campoHistorico.setText(campoHistorico.getText() + "\nA aresta não existe.");
        }

    }//GEN-LAST:event_botaoVerificarArestaActionPerformed

    private void botaoRetornarArestasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoRetornarArestasActionPerformed
        String rotulo = pergunta("Qual o rótulo do vértice?");

        if (rotulo.equals("")) {
            campoHistorico.setText(campoHistorico.getText() + "\nResposta inválida");
            return;
        }

        ArrayList<Aresta> arestas = grafo.retornarArestas(rotulo);

        if (arestas != null) {
            campoHistorico.setText(campoHistorico.getText() + "\nArestas para o Vértice " + rotulo + ": ");
            for (Aresta aresta : arestas) {
                campoHistorico.setText(campoHistorico.getText() + aresta.getVertice() + " | ");
            }
        } else {
            campoHistorico.setText(campoHistorico.getText() + "\nO vértice não possui arestas.");
        }

    }//GEN-LAST:event_botaoRetornarArestasActionPerformed

    private void botaoImprimirGrafoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoImprimirGrafoActionPerformed
        campoHistorico.setText(campoHistorico.getText() + "\n" + grafo.imprimeGrafo());
    }//GEN-LAST:event_botaoImprimirGrafoActionPerformed

    private void botaoPlanarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoPlanarActionPerformed
        if (grafo.listaVertice.size() <= 0) {
            campoHistorico.setText(campoHistorico.getText() + "\nNão existem vértices.");
        } else if (grafo.verificaPlanar()) {
            campoHistorico.setText(campoHistorico.getText() + "\nO grafo pode ser planar.");
        } else {
            campoHistorico.setText(campoHistorico.getText() + "\nO grafo não é planar.");
        }
    }//GEN-LAST:event_botaoPlanarActionPerformed

    private void botaoLimparHistoricoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoLimparHistoricoActionPerformed
        campoHistorico.setText("");
    }//GEN-LAST:event_botaoLimparHistoricoActionPerformed

    private void botaoBuscaEmLarguraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoBuscaEmLarguraActionPerformed
        String verticeOrigem = pergunta("Qual o rótulo do vértice de origem?");

        if (verticeOrigem.equals("")) {
            campoHistorico.setText(campoHistorico.getText() + "\nResposta inválida");
            return;
        }

        this.vesticesVisitados = grafo.bfs(verticeOrigem);
        campoHistorico.setText(campoHistorico.getText() + "\n");
        for (String vesticesVisitado : vesticesVisitados) {
            campoHistorico.setText(campoHistorico.getText() + vesticesVisitado + ", ");
        }
        grafo.resetVisitados();
    }//GEN-LAST:event_botaoBuscaEmLarguraActionPerformed

    private void botaoBuscaEmProfundidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoBuscaEmProfundidadeActionPerformed
        String verticeOrigem = pergunta("Qual o rótulo do vértice de origem?");

        if (verticeOrigem.equals("")) {
            campoHistorico.setText(campoHistorico.getText() + "\nResposta inválida");
            return;
        }

        this.vesticesVisitados = grafo.dfs(verticeOrigem);
        campoHistorico.setText(campoHistorico.getText() + "\n");
        for (String vesticesVisitado : vesticesVisitados) {
            campoHistorico.setText(campoHistorico.getText() + vesticesVisitado + ", ");
        }
        grafo.resetVisitados();
    }//GEN-LAST:event_botaoBuscaEmProfundidadeActionPerformed

    private void botaoDijkstraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoDijkstraActionPerformed
        String verticeOrigem = pergunta("Qual o rótulo do vértice de origem?");
        String verticeDestino = pergunta("Qual o rótulo do vértice de destino?");

        if (verticeOrigem.equals("")) {
            campoHistorico.setText(campoHistorico.getText() + "\nResposta inválida");
            return;
        }

        campoHistorico.setText(grafo.dijkstra(verticeOrigem, verticeDestino));

        grafo.resetVisitados();
    }//GEN-LAST:event_botaoDijkstraActionPerformed

    private void botaoVerticesAutomaticosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoVerticesAutomaticosActionPerformed
        grafo.criarGrafoTeste();
    }//GEN-LAST:event_botaoVerticesAutomaticosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoAdicionarAresta;
    private javax.swing.JButton botaoAdicionarVertice;
    private javax.swing.JButton botaoBuscaEmLargura;
    private javax.swing.JButton botaoBuscaEmProfundidade;
    private javax.swing.JButton botaoCriarGrafo;
    private javax.swing.JButton botaoDijkstra;
    private javax.swing.JButton botaoImprimirGrafo;
    private javax.swing.JButton botaoLimparHistorico;
    private javax.swing.JButton botaoPlanar;
    private javax.swing.JButton botaoRemoverAresta;
    private javax.swing.JButton botaoRemoverVertice;
    private javax.swing.JButton botaoRetornarArestas;
    private javax.swing.JButton botaoVerificarAresta;
    private javax.swing.JButton botaoVerificarVertice;
    private javax.swing.JButton botaoVerticesAutomaticos;
    private javax.swing.JTextArea campoHistorico;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
